-- Step 1: Set session to container root
==========================================
ALTER SESSION SET CONTAINER = CDB$ROOT;

-- Step 2: Create the new pluggable database
==============================================
CREATE PLUGGABLE DATABASE mon_26084_serge_hms_db
  ADMIN USER pdb_admin IDENTIFIED BY serge
  FILE_NAME_CONVERT = (
    'PDBSEED', 'mon_26084_serge_hms_db'
  );

-- Step 3: Open the new PDB
====================================
ALTER PLUGGABLE DATABASE mon_26084_serge_hms_db OPEN;

-- Step 4: Save the PDB state
======================================
ALTER PLUGGABLE DATABASE mon_26084_serge_hms_db SAVE STATE;

table creation 
===================

CREATE TABLE patient (
    patient_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name       VARCHAR2(100) NOT NULL,
    email           VARCHAR2(100) UNIQUE,
    phone           VARCHAR2(20),
    birth_date      DATE
);

CREATE TABLE doctor (
    doctor_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name       VARCHAR2(100) NOT NULL,
    specialty       VARCHAR2(100),
    email           VARCHAR2(100) UNIQUE
);

CREATE TABLE appointment (
    appointment_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id          NUMBER NOT NULL,
    doctor_id           NUMBER NOT NULL,
    appointment_date    DATE NOT NULL,
    status              VARCHAR2(20) DEFAULT 'Scheduled' CHECK (status IN ('Scheduled', 'Completed', 'Cancelled')),
    FOREIGN KEY (patient_id) REFERENCES patient(patient_id),
    FOREIGN KEY (doctor_id) REFERENCES doctor(doctor_id)
);

CREATE TABLE medical_record (
    record_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id      NUMBER NOT NULL,
    diagnosis       VARCHAR2(200),
    treatment       VARCHAR2(200),
    visit_date      DATE DEFAULT SYSDATE,
    FOREIGN KEY (patient_id) REFERENCES patient(patient_id)
);

inserting into tables 
=======================
INSERT INTO patient (full_name, email, phone, birth_date) 
VALUES ('Alice Uwase', 'alice@email.com', '+250788111222', TO_DATE('1990-05-15', 'YYYY-MM-DD'));

INSERT INTO patient (full_name, email, phone, birth_date) 
VALUES ('Bob Niyonkuru', 'bob@email.com', '+250788333444', TO_DATE('1985-10-20', 'YYYY-MM-DD'));

INSERT INTO patient (full_name, email, phone, birth_date) 
VALUES ('Claire Mukamana', 'claire@email.com', '+250788555666', TO_DATE('1978-03-25', 'YYYY-MM-DD'));

INSERT INTO doctor (full_name, specialty, email) 
VALUES ('Dr. John Gasana', 'Cardiology', 'dr.john@hospital.com');

INSERT INTO doctor (full_name, specialty, email) 
VALUES ('Dr. Mary Uwimana', 'Pediatrics', 'dr.mary@hospital.com');

INSERT INTO doctor (full_name, specialty, email) 
VALUES ('Dr. James Nkusi', 'Neurology', 'dr.james@hospital.com');

INSERT INTO appointment (patient_id, doctor_id, appointment_date, status) 
VALUES (1, 1, TO_DATE('2025-06-10 09:00', 'YYYY-MM-DD HH24:MI'), 'Scheduled');

INSERT INTO appointment (patient_id, doctor_id, appointment_date, status) 
VALUES (2, 2, TO_DATE('2025-06-11 10:30', 'YYYY-MM-DD HH24:MI'), 'Scheduled');

INSERT INTO appointment (patient_id, doctor_id, appointment_date, status) 
VALUES (3, 3, TO_DATE('2025-06-12 14:00', 'YYYY-MM-DD HH24:MI'), 'Scheduled');

INSERT INTO medical_record (patient_id, diagnosis, treatment) 
VALUES (1, 'Hypertension', 'Prescribed medication and lifestyle changes');

INSERT INTO medical_record (patient_id, diagnosis, treatment) 
VALUES (2, 'Common Cold', 'Rest and hydration advised');

INSERT INTO medical_record (patient_id, diagnosis, treatment) 
VALUES (3, 'Migraine', 'Pain relievers and follow-up scheduled');

creation of procudures 
=======================

CREATE OR REPLACE PROCEDURE book_appointment (
    p_patient_id    IN NUMBER,
    p_doctor_id     IN NUMBER,
    p_appointment_date IN DATE,
    p_status        IN VARCHAR2 DEFAULT 'Scheduled'
) AS
BEGIN
    INSERT INTO appointment (patient_id, doctor_id, appointment_date, status)
    VALUES (p_patient_id, p_doctor_id, p_appointment_date, p_status);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Appointment booked successfully!');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END book_appointment;
/

testing the procudure
=====================
EXEC book_appointment(1, 2, TO_DATE('2025-06-15 11:00', 'YYYY-MM-DD HH24:MI'));

create function to count appointment
====================================

CREATE OR REPLACE FUNCTION count_doctor_appointments (
    p_doctor_id IN NUMBER
) RETURN NUMBER AS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM appointment
    WHERE doctor_id = p_doctor_id;
    RETURN v_count;
END count_doctor_appointments;
/

test function 
==============
SELECT count_doctor_appointments(1) AS appointments_count FROM dual;

Trigger to Block Past-Date Appointments
========================================
CREATE OR REPLACE TRIGGER prevent_past_appointments
BEFORE INSERT OR UPDATE ON appointment
FOR EACH ROW
BEGIN
    IF :NEW.appointment_date < SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot book/cancel appointments in the past.');
    END IF;
END;
/

test trigger 
=============
-- This should fail:
INSERT INTO appointment (patient_id, doctor_id, appointment_date, status) 
VALUES (1, 1, TO_DATE('2024-01-01 09:00', 'YYYY-MM-DD HH24:MI'), 'Scheduled');

Cursor to Display All Appointments
===================================
CREATE OR REPLACE PROCEDURE display_all_appointments AS
  -- Declare the cursor
  CURSOR appointment_cursor IS
    SELECT a.appointment_id, p.full_name AS patient_name, 
           d.full_name AS doctor_name, a.appointment_date, a.status
    FROM appointment a
    JOIN patient p ON a.patient_id = p.patient_id
    JOIN doctor d ON a.doctor_id = d.doctor_id
    ORDER BY a.appointment_date;
    
  -- Variable to hold each row
  v_appointment_row appointment_cursor%ROWTYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE('===== ALL APPOINTMENTS =====');
  DBMS_OUTPUT.PUT_LINE('ID  Patient          Doctor           Date                Status');
  DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------');
  
  -- Open the cursor and fetch rows
  OPEN appointment_cursor;
  LOOP
    FETCH appointment_cursor INTO v_appointment_row;
    EXIT WHEN appointment_cursor%NOTFOUND;
    
    -- Display each appointment
    DBMS_OUTPUT.PUT_LINE(
      RPAD(v_appointment_row.appointment_id, 4) || ' ' ||
      RPAD(v_appointment_row.patient_name, 15) || ' ' ||
      RPAD(v_appointment_row.doctor_name, 15) || ' ' ||
      RPAD(TO_CHAR(v_appointment_row.appointment_date, 'DD-MON-YY HH24:MI'), 18) || ' ' ||
      v_appointment_row.status
    );
  END LOOP;
  
  -- Close the cursor
  CLOSE appointment_cursor;
  DBMS_OUTPUT.PUT_LINE('Total appointments: ' || appointment_cursor%ROWCOUNT);
EXCEPTION
  WHEN OTHERS THEN
    IF appointment_cursor%ISOPEN THEN
      CLOSE appointment_cursor;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END display_all_appointments;
/

test the cursor 
===============
SET SERVEROUTPUT ON;
EXEC display_all_appointments;